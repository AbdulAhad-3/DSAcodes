#include <iostream>
using namespace std;
struct Node {
    float data;
    Node* next;

    Node(float val) : data(val), next(nullptr) {}
};

Node* insert(Node* head, float value) {
    Node* newNode = new Node(value);
    if (!head) {
        head = newNode;
        newNode->next = head;
    } else {
        Node* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head;
    }
    return head;
}

bool search(Node* head, float value) {
    if (!head) {
        return false;
    }
    Node* current = head;
    do {
        if (current->data == value) {
            return true;
        }
        current = current->next;
    } while (current != head);
    return false;
}

Node* remove(Node* head, float value) {
    if (!head) {
        return nullptr;
    }
    Node* current = head;
    Node* prev = nullptr;
    bool found = false;
    do {
        if (current->data == value) {
            found = true;
            break;
        }
        prev = current;
        current = current->next;
    } while (current != head);

    if (!found) {
        cout << "Value not found in the list." <<endl;
        return head;
    }

    if (current == head && current->next == head) {
        delete current;
        return nullptr;
    } else if (current == head) {
        Node* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        head = head->next;
        temp->next = head;
        delete current;
    } else {
        prev->next = current->next;
        delete current;
    }

    return head;
}

// Function to display the circular linked list.
void display(Node* head) {
    if (!head) {
        cout << "The list is empty." <<endl;
        return;
    }
    Node* current = head;
    do {
        cout << current->data << " ";
        current = current->next;
    } while (current != head);
    cout << endl;
}

int main() {
    Node *head = nullptr;
    int choice;
    float value;

    while (true) {
        cout << "1. Insert a value" << endl;
        cout << "2. Search for a value" << endl;
        cout << "3. Delete a value" << endl;
        cout << "4. Display the list" << endl;
        cout << "5. Quit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter a value to insert: ";
                cin >> value;
                head = insert(head, value);
                break;
            case 2:
                cout << "Enter a value to search: ";
                cin >> value;
                if (search(head, value)) {
                    cout << "Value found in the list." << endl;
                } else {
                    cout << "Value not found in the list." << endl;
                }
                break;
            case 3:
                cout << "Enter a value to delete: ";
                cin >> value;
                head = remove(head, value);
                break;
            case 4:
                display(head);
                break;
            case 5:
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
