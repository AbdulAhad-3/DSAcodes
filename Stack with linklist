#include <iostream>
using namespace std;
struct Node {
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

struct Stack {
    Node* top;

    Stack() : top(nullptr) {}

    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }

    void push(int value) {
        Node* newNode = new Node(value);
        if (top == nullptr) {
            top = newNode;
        } else {
            newNode->next = top;
            top = newNode;
        }
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack is empty. Cannot pop." <<endl;
            return;
        }
        Node* temp = top;
        top = top->next;
        delete temp;
    }

    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty." <<endl;
            return -1; // Return a default value in case of an empty stack
        }
        return top->data;
    }

    bool isEmpty() {
        return top == nullptr;
    }

    void display() {
        Node* current = top;
       cout << "Stack: ";
        while (current != nullptr) {
            cout << current->data << " ";
            current = current->next;
        }
        cout <<endl;
    }
};

int main() {
    Stack stack;
    int choice, value;

    while (true) {
        cout<<"1. Push  "<<endl;
        cout<<"2. Pop  "<<endl;
        cout<<"3. Peek "<<endl;
        cout<<"4. Display "<<endl;
        cout<<"5. Exit" << endl;
        cout << "Enter your choice: "<<endl;
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter a value to push: "<<endl;
                cin >> value;
                stack.push(value);
                break;
            case 2:
                stack.pop();
                break;
            case 3:
                cout << "Top element: " << stack.peek() << endl;
                break;
            case 4:
                stack.display();
                break;
            case 5:
                return 0;
            default:
                cout << "Invalid choice. Please try again." <<endl;
        }
    }
}
